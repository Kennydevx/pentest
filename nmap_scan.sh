#!/bin/bash

# Verifica se os argumentos foram passados
if [ "$#" -ne 2 ]; then
    echo "Uso: $0 <arquivo_subdominios> <pasta_resultados>"
    exit 1
fi

# Variáveis
SUBDOMINIOS_FILE="$1"
PASTA_RESULTADOS="$2"
ATIVOS_FILE="$PASTA_RESULTADOS/ativos.txt"
HEADERS_DIR="$PASTA_RESULTADOS/headers"
VULNERABILIDADES_FILE="$PASTA_RESULTADOS/vulnerabilidades.txt"
PORTAS_FILE="$PASTA_RESULTADOS/portas.txt"

NMAP_RESULT_FILE="$PASTA_RESULTADOS/nmap_resultados.txt"
NIKTO_RESULT_DIR="$PASTA_RESULTADOS/nikto"
GOBUSTER_RESULT_DIR="$PASTA_RESULTADOS/gobuster"
SSL_RESULT_DIR="$PASTA_RESULTADOS/ssl"
OPENVAS_RESULT_DIR="$PASTA_RESULTADOS/openvas"

# Função de log
log() {
    echo "[*] $1"
    echo "[$(date +%H:%M:%S)] $1" >> "$PASTA_RESULTADOS/log.txt"
}

# Verifica se o arquivo de subdomínios existe
if [ ! -f "$SUBDOMINIOS_FILE" ]; then
    log "Erro: O arquivo de subdomínios '$SUBDOMINIOS_FILE' não foi encontrado."
    exit 1
fi

# Cria diretórios para resultados
mkdir -p "$NIKTO_RESULT_DIR" "$GOBUSTER_RESULT_DIR" "$SSL_RESULT_DIR" "$OPENVAS_RESULT_DIR" "$HEADERS_DIR"

# Função para verificar se o subdomínio está ativo
verificar_ativo() {
    local subdominio="$1"
    if ping -c 1 "$subdominio" &> /dev/null; then
        echo "$subdominio" >> "$ATIVOS_FILE"
        log "$subdominio está ativo."
    else
        log "$subdominio não está ativo."
    fi
}

# Função para coletar cabeçalhos HTTP
coletar_headers() {
    local subdominio="$1"
    curl -s -I "$subdominio" > "$HEADERS_DIR/$subdominio.txt"
    log "Cabeçalhos HTTP de $subdominio coletados."
}

# Função para escanear vulnerabilidades com Nikto
escanear_nikto() {
    local subdominio="$1"
    nikto -h "$subdominio" -o "$NIKTO_RESULT_DIR/nikto_$subdominio.txt" -Format txt || {
        log "Erro ao escanear com Nikto: $subdominio"
        continue
    }
    log "Nikto: Resultados salvos em $NIKTO_RESULT_DIR/nikto_$subdominio.txt"
}

# Função para descobrir diretórios e arquivos com Gobuster
escanear_gobuster() {
    local subdominio="$1"
    gobuster dir -u "http://$subdominio" -w /usr/share/wordlists/dirb/common.txt -o "$GOBUSTER_RESULT_DIR/gobuster_$subdominio.txt"
    log "Gobuster: Resultados salvos em $GOBUSTER_RESULT_DIR/gobuster_$subdominio.txt"
}

# Função para verificar SSL com TestSSL.sh
verificar_ssl() {
    local subdominio="$1"
    testssl.sh "$subdominio" > "$SSL_RESULT_DIR/testssl_$subdominio.txt"
    log "TestSSL.sh: Resultados salvos em $SSL_RESULT_DIR/testssl_$subdominio.txt"
}

# Função para escanear vulnerabilidades com OpenVAS
escanear_openvas() {
    local subdominio="$1"
    openvas -u "$subdominio" -o "$OPENVAS_RESULT_DIR/openvas_$subdominio.xml" || {
        log "Erro ao escanear com OpenVAS: $subdominio"
        return
    }
    log "OpenVAS: Resultados salvos em $OPENVAS_RESULT_DIR/openvas_$subdominio.xml"
}

# Escaneamento de portas e serviços com Nmap
log "Iniciando escaneamento com Nmap..."
nmap -sV -p- -T4 --open -oN "$NMAP_RESULT_FILE" -iL "$SUBDOMINIOS_FILE" || {
    log "Erro ao executar o escaneamento com Nmap."
    exit 1
}
log "Escaneamento Nmap concluído. Resultados salvos em $NMAP_RESULT_FILE."

# Loop para cada subdomínio
log "Iniciando verificações automáticas nos subdomínios ativos..."
while IFS= read -r subdominio; do
    verificar_ativo "$subdominio"
    coletar_headers "$subdominio"
    escanear_nikto "$subdominio"
    escanear_gobuster "$subdominio"
    verificar_ssl "$subdominio"
    escanear_openvas "$subdominio"
done < "$SUBDOMINIOS_FILE"

log "Escaneamento completo e automatizado!"
